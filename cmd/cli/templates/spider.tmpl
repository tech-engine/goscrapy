package {{.}}

import (
	"context"
	"net/http"
	"encoding/json"
	"log"

	"github.com/tech-engine/goscrapy/cmd/gos"
	"github.com/tech-engine/goscrapy/pkg/core"
)

type Spider struct {
	gos.ICoreSpider[*Record]
}

func NewSpider(ctx context.Context) (*Spider, <-chan error) {

	// use proxies
	// proxies := core.WithProxies("proxy_url1", "proxy_url2", ...)
	// core := gos.New[*Record]().WithClient(
	// 	gos.DefaultClient(proxies),
	// )

	core := gos.New[*Record]()

	// Add middlewares
	core.MiddlewareManager.Add(MIDDLEWARES...)
	// Add pipelines
	core.PipelineManager.Add(PIPELINES...)

	errCh := make(chan error)

	go func() {
		errCh <- core.Start(ctx)
	}()

	return &Spider{
		core,
	}, errCh
}

func (s *Spider) StartRequest(ctx context.Context, job *Job) {

    // for each request we must call NewRequest() and never reuse it
	req := s.NewRequest()

    var headers http.Header

    // GET is the request method, method chaining possible
	req.Url("<URL_HERE>").
	Meta("MY_KEY1", "MY_VALUE").
	Meta("MY_KEY2", true).
	Header(headers)
    
    /* POST
    req.Url(<URL_HERE>)
    req.Method("POST")
    req.Body(<BODY_HERE>)
    */
    
    // call the next parse method
	s.Request(req, s.parse)
}

// can be called when spider is about to close
func (s *Spider) Close(ctx context.Context) {
}

func (s *Spider) parse(ctx context.Context, resp core.IResponseReader) {
    // response.Body()
    // response.StatusCode()
    // response.Header()
	// response.Bytes()
	// response.Meta("MY_KEY1")
	
    // yielding output pushes output to be processed by pipelines, also check output.go for the fields
    var data Record

	err := json.Unmarshal(resp.Bytes(), &data)
	if err != nil {
		log.Panicln(err)
	}

	// s.Yield(&data)
}
