package pipelines

import (
	"context"

	"github.com/tech-engine/goscrapy/pkg/core"
	metadata "github.com/tech-engine/goscrapy/pkg/meta_data"
	"github.com/tech-engine/goscrapy/pkg/pipelines"
)

type {{.}}[IN core.Job, OUT any, OR core.Output[IN, OUT]] struct {
	onOpenHook  pipelines.OpenHook
	onCloseHook pipelines.CloseHook
	// add your custom fields here
}

func {{ capitalizeFirstLetter .}}[IN core.Job, OUT any](args ...string) *{{.}}[IN, OUT, core.Output[IN, OUT]] {
	// your custom initialization code goes here
	return &{{.}}[IN, OUT, core.Output[IN, OUT]]{}
}

func (p *{{.}}[IN, OUT, OR]) SetOpenHook(open pipelines.OpenHook) *{{.}}[IN, OUT, OR] {
	p.onOpenHook = open
	return p
}

func (p *{{.}}[IN, OUT, OR]) SetCloseHook(close pipelines.CloseHook) *{{.}}[IN, OUT, OR] {
	p.onCloseHook = close
	return p
}

func (p *{{.}}[IN, OUT, OR]) Open(ctx context.Context) error {
	if p.onOpenHook == nil {
		return nil
	}
	return p.onOpenHook(ctx)
}

func (p *{{.}}[IN, OUT, OR]) Close() {
	if p.onCloseHook == nil {
		return
	}
	p.onCloseHook()
}

// your custome pipeline processing code goes here
func (p *{{.}}[IN, OUT, OR]) ProcessItem(input any, original OR, MetaData metadata.MetaData) (any, error) {

	// original is the output yield from spider
	// original.IsEmpty()   	- check if data is empty
	// original.Job()       	- access Job
	// original.Records()   	- access []Record
	// original.RecordKeys()  	- access Record keys in a slice
	// original.RecordsFlat()	- access []Record in [][]any format

	if original.IsEmpty() {
		return nil, nil
	}

	return nil, nil
}
