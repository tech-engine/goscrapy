package {{.}}

import (
	"context"
	"errors"
	"net/url"

	"github.com/tech-engine/goscrapy/pkg/core"
)

func NewSpider() (*Spider, error) {
	// create pool
	var (
		err  error
		_url *url.URL
		s    *Spider
	)

	_url, err = url.Parse("<URL_HERE>")

	if err != nil {
		return nil, err
	}

	s = &Spider{
		baseUrl: _url,
	}

	return s, nil
}

func (s *Spider) StartRequest(ctx context.Context, job *Job) {

    // for each request we must call NewRequest() and never reuse it
	req := s.NewRequest()

    var headers map[string]string

    // GET is the request method
	req.SetUrl(s.baseUrl.String()).
		SetMetaData("JOB", job).
		SetHeaders(headers)
    
    /* POST
    req.SetUrl(s.baseUrl.String()).
        SetMethod("POST").
		SetMetaData("JOB", job).
		SetHeaders(headers).
        SetBody(<BODY_HERE>)
    */
    
    // call the next parse method
	s.Request(ctx, req, s.parse)
}

// called when spider is above to close
func (s *Spider) Close() {
}

func (s *Spider) parse(ctx context.Context, response core.ResponseReader) {
    // response.Body()
    // response.StatusCode()
    // response.Headers()
    // check output.go for the fields
    // s.yield(output)
}
